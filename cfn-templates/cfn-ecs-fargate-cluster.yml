AWSTemplateFormatVersion: '2010-09-09'
Description: A stack for deploying containerized applications onto a Fargate using Elastic Container Service. 
Parameters:
  MinContainers:
    Type: Number
    Default: '1'
    Description: Number of instances to launch in your ECS cluster.
  MaxContainers:
    Type: Number
    Default: '12'
    Description: Maximum number of instances that can be launched in your ECS cluster.
  DesiredCount:
    Type: Number
    Default: 1    
  ServiceName:
    Type: String
    Default: saml-proxy
    Description: A name for the service
  ContainerPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to
  OrgName:
    Description: The name of the organization (i.e. Company Inc.)
    Type: String      
  OrgDisplayName:
    Description: The display name of the organization (i.e. Company Inc.)
    Type: String
  OrgUrl: 
    Description: the url of the organization (i.e. https://domain.com)
    Type: String
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container    
  ImageUrl:
    Description: The URL of the container image.
    Type: String
  VPC:
    Description: The VPC to place the cluster into.
    Type: AWS::EC2::VPC::Id
  ClusterSubnets:
    Description: The subnets the cluster will use. Make sure these reside in the selected VPC.
    Type: List<AWS::EC2::Subnet::Id>
  LoadBalancerSubnets:
    Description: The subnets the load balancer will use. Make sure tehse reside in the selected VPC.
    Type: List<AWS::EC2::Subnet::Id>
  PrivateKeySecretArn:
    Description: The Arn of the Secret that contains the Private Key used for metadata.
    Type: String    
  MetadataCertSecretArn:
    Description: The Arn of the Secret that contains the public key.
    Type: String  
  BaseUrl:
    Type: String
    Description: The BaseUrl for your proxy. (i.e. https://samlproxy.domain.com) 
  IdpMetadataUrl:
    Description: The Url where the metadata for the target IdP can be downloaded from. (i.e. https://shibboleth.domain.com/idp/shibboleth)
    Type: String
  AcmCertificateArn:
    Description: The Amazon Resource Name (ARN) of the AWS Certificate Manager (ACM) certificate that will be installed on the load balancer and used to secure client communication. 
    Type: String        
  AWSRoute53HostedZoneName:
    Description: (optional) The Route53 DNS hosted zone name where a DNS entry for the cluster load balancer will be created. For example, if the hosted zone name is "example.com" enter "example.com" without parenthesis. 
    Type: String
    Default: ''
  AWSRoute53DnsRecordSetName:
    Description: (optional) The DNS entry to create in the hosted zone for the cluster load balancer. For example, if the hosted zone is "example.com" and "site.example.com" should redirect to the load balancer, enter "site" without parentheses
    Type: String    
    Default: ''


Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label: 
          default: Proxy Configuration
        Parameters:
          - BaseUrl
          - IdpMetadataUrl
          - PrivateKeySecretArn
          - MetadataCertSecretArn   
          - AcmCertificateArn                 
      - Label:
          default: Cluster Configuration
        Parameters:
          - MinContainers
          - MaxContainers
      - Label: 
          default: Route53 DNS (optional)
        Parameters:
          - AWSRoute53HostedZoneName
          - AWSRoute53DnsRecordSetName
      - Label:
          default: VPC Configuration
        Parameters:
          - VPC
          - ClusterSubnets
          - LoadBalancerSubnets
      - Label:
          default: Service Configuration
        Parameters:
          - DesiredCount
          - ServiceName
      - Label:
          default: Task Configuration
        Parameters:
          - ImageUrl
          - ContainerPort
          - ContainerCpu
          - ContainerMemory       
Conditions:
    HasRoute53HostedZoneName: !Not [!Equals [!Ref 'AWSRoute53HostedZoneName', '']]
Resources:
  StateKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Private Key used for for state encryption 
      GenerateSecretString:
        ExcludePunctuation: True
        PasswordLength: 20
        
  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ['/', [service, !Ref ECSCluster, !GetAtt Service.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
      RoleARN: !GetAtt AutoscalingRole.Arn
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!Ref ServiceName, AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: 50
  TaskExecutionSecretPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - secretsmanager:DescribeSecret
          - secretsmanager:GetSecretValue
          Effect: Allow
          Resource:
          - !Ref PrivateKeySecretArn
          - !Ref MetadataCertSecretArn
          - !Ref StateKeySecret
      PolicyName: !Join ['-', [!Ref 'AWS::StackName', TaskExecutionSecretPolicy]]
      Roles:
        - !Ref 'TaskExecutionRole'

  EcsServiceLinkedRole:
    Type: "AWS::IAM::ServiceLinkedRole"
    Properties:
      AWSServiceName: "ecs.amazonaws.com"
      Description: "Role to enable Amazon ECS to manage your cluster."
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
    
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}      
  Service:
    DependsOn: PublicLoadBalancerListener
    Type: AWS::ECS::Service
    Properties:
      ServiceName:  !Join [ '-', [ !Ref 'AWS::StackName' , !Ref ServiceName ] ]
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: 
            - !Ref ContainerSecurityGroup
          AssignPublicIp: ENABLED
          Subnets: !Ref ClusterSubnets
      DesiredCount: !Ref 'DesiredCount'
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: satosa
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroup'
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join [ '-', [ !Ref 'AWS::StackName' , !Ref ServiceName ] ]
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt 'TaskExecutionRole.Arn'
      ContainerDefinitions:
        - Name: satosa
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          Secrets:
            - Name: PRIVATE_KEY
              ValueFrom: !Ref PrivateKeySecretArn
            - Name: STATE_ENCRYPTION_KEY
              ValueFrom: !Ref StateKeySecret
            - Name: CERTIFICATE
              ValueFrom: !Ref MetadataCertSecretArn
          Environment:
            - Name: ORG_DISPLAY_NAME
              Value: !Ref OrgDisplayName
            - Name: ORG_NAME
              Value: !Ref OrgName
            - Name: ORG_URL
              Value: !Ref OrgUrl
            - Name: BASE_URL
              Value: !Ref BaseUrl
            - Name: IDP_ENTITY_ID
              Value: !Sub ${BaseUrl}/idp
            - Name: SP_ENTITY_ID
              Value: !Sub ${BaseUrl}/Saml2/sp
            - Name: IDP_METADATA_URL
              Value: !Ref IdpMetadataUrl
            - Name: DATA_DIR
              Value: /etc/satosa/config
            - Name: PROXY_PORT
              Value: '80'
            - Name: METADATA_DIR
              Value: /etc/satosa/config/metadata
                 
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref AWS::StackName
        
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'application-autoscaling:*'
              - 'cloudwatch:DescribeAlarms'
              - 'cloudwatch:PutMetricAlarm'
              - 'ecs:DescribeServices'
              - 'ecs:UpdateService'
            Resource: '*'



  # A public facing load balancer, this is used for accepting traffic from the public
  # internet and directing it to public facing microservices
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
          # Allow access to ALB from anywhere on the internet
          - CidrIp: 0.0.0.0/0
            IpProtocol: "-1"

  LoadBalancerLogsBucket:
    Type: AWS::S3::Bucket

  LoadBalancerLogsBucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LoadBalancerLogsBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: 
              AWS: 'arn:aws:iam::127311923021:root'
            Action: "s3:PutObject"
            Resource: !Sub 'arn:aws:s3:::${LoadBalancerLogsBucket}/AWSLogs/${AWS::AccountId}/*'
          - Effect: Allow
            Principal: 
              Service: 'delivery.logs.amazonaws.com'
            Action: "s3:PutObject"
            Resource: !Sub 'arn:aws:s3:::${LoadBalancerLogsBucket}/AWSLogs/${AWS::AccountId}/*'
            Condition:
              StringEquals:
                s3:x-amz-acl: "bucket-owner-full-control"
          - Effect: Allow
            Principal: 
              Service: 'delivery.logs.amazonaws.com'
            Action: "s3:GetBucketAcl"
            Resource: !Sub 'arn:aws:s3:::${LoadBalancerLogsBucket}'

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      - Key: access_logs.s3.enabled
        Value: 'true'
      - Key: access_logs.s3.bucket
        Value: !Ref LoadBalancerLogsBucket
      Subnets:
        # The load balancer is placed into the public subnets, so that traffic
        # from the internet can reach the load balancer directly via the internet gateway
        !Ref LoadBalancerSubnets
      SecurityGroups: [!GetAtt PublicLoadBalancerSG.GroupId]
 
  TargetGroup:
    DependsOn: PublicLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /idp
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'
      TargetType: 'ip'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '86400'       

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 443
      Protocol: HTTPS
      Certificates: 
        - CertificateArn: !Ref AcmCertificateArn

  RedirectListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: HTTPS
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 80
      Protocol: HTTP

  DnsRecordSet:
    Type: AWS::Route53::RecordSetGroup
    Condition: HasRoute53HostedZoneName
    Properties:
      HostedZoneName: !Join ['', [!Ref AWSRoute53HostedZoneName, "."]]
      Comment: Zone apex alias targeted to myELB LoadBalancer.
      RecordSets:
      - Name: !Join ['', [!Ref AWSRoute53DnsRecordSetName, ".", !Ref AWSRoute53HostedZoneName, "."]]
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt 'PublicLoadBalancer.CanonicalHostedZoneID'
          DNSName: !GetAtt 'PublicLoadBalancer.DNSName'


  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS hosts that run containers
      VpcId: !Ref 'VPC'
  ContainerSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref 'ContainerSecurityGroup'
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref 'PublicLoadBalancerSG'
  ContainerSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'ContainerSecurityGroup'
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref 'ContainerSecurityGroup'

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'

              # Rules which allow ECS to update load balancers on your behalf
              # with the information about how to send traffic to your containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'

# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ClusterName' ] ]
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Join ['', ['https://', !GetAtt 'PublicLoadBalancer.DNSName']]
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ExternalUrl' ] ]
  ExternalDnsUrl:
    Description: The url of the external load balancer
    Value: !Join ['', ['https://', !Ref 'AWSRoute53DnsRecordSetName', ".", !Ref 'AWSRoute53HostedZoneName']]
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ExternalDnsUrl' ] ]      
  ECSRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSRole' ] ]
  PublicListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref PublicLoadBalancerListener
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicListener' ] ]
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'VPCId' ] ]
  TargetGroup:
    Description: The ARN of the Target Group created.
    Value: !Ref 'TargetGroup'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'TargetGroup' ] ]
      